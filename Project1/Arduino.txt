#include <Wire.h>

#define DTR 8
#define RTS 7


#define BAUD (9600)    /* Serial baud define */

#define _7SEG (0x38)   /* I2C address for 7-Segment */

#define THERM (0x49)   /* I2C address for digital thermometer */

#define EEP (0x50)     /* I2C address for EEPROM */

#define RED (3)        /* Red color pin of RGB LED */

#define GREEN (5)      /* Green color pin of RGB LED */

#define BLUE (6)       /* Blue color pin of RGB LED */



#define COLD (23)      /* Cold temperature, drive blue LED (23c) */

#define HOT (26)       /* Hot temperature, drive red LED (27c) */





const byte NumberLookup[16] =   {0x3F,0x06,0x5B,0x4F,0x66,

                                0x6D,0x7D,0x07,0x7F,0x6F,

                                0x77,0x7C,0x39,0x5E,0x79,0x71};


/* Vals initialization*/
int timer = 500;
int alarmPin = 0;
int alarmValue = 0;






void X10setup();
void X10_Command(unsigned char Control_Code, unsigned char On_Off);
void sendOne();


/* Function prototypes */

void Cal_temp (int&, byte&, byte&, bool&);

void Dis_7SEG (int, byte, byte, bool);

void Send7SEG (byte, byte);

void SerialMonitorPrint (byte, int, bool);

void UpdateRGB (byte);

void blinky();

int motion();


/***************************************************************************

 Function Name: setup



 Purpose:

  Initialize hardwares.

****************************************************************************/

char inputString[50];


boolean stringComplete = false;

int LEDflag = 0;
byte Temperature_H, Temperature_L;
 int Decimal;
 bool IsPositive;

void setup()

{
//inputString[3] = '\0';
 Serial.begin(BAUD);

 //inputString.reserve(16);

 Wire.begin();        /* Join I2C bus */

 pinMode(alarmPin, INPUT);

 delay(2000);

 pinMode(RED, OUTPUT);

 pinMode(GREEN, OUTPUT);

 pinMode(BLUE, OUTPUT);

 delay(500);          /* Allow system to stabilize */

}



/***************************************************************************

 Function Name: loop



 Purpose:

  Run-time forever loop.

****************************************************************************/



void loop()

{



 byte counter, counter2;





 /* Configure 7-Segment to 12mA segment output current, Dynamic mode,

    and Digits 1, 2, 3 AND 4 are NOT blanked */



 Wire.beginTransmission(_7SEG);

 Wire.write(byte(0));

 Wire.write(B01000111);

 Wire.endTransmission();



 /* Setup configuration register 12-bit */



 Wire.beginTransmission(THERM);

 Wire.write(byte(1));

 Wire.write(B01100000);

 Wire.endTransmission();



 /* Setup Digital THERMometer pointer register to 0 */



 Wire.beginTransmission(THERM);

 Wire.write(byte(0));

 Wire.endTransmission();



 /* Test 7-Segment */

 for (counter=0; counter<8; counter++)

 {

   Wire.beginTransmission(_7SEG);

   Wire.write(byte(1));

   for (counter2=0; counter2<4; counter2++)

   {

     Wire.write(1<<counter);

   }

   Wire.endTransmission();

   delay (250);

 }

 X10setup();
 

 while (1)

 {
  if(motion()){
    X10_Command(0x60,0x00);
  }
  else{
    X10_Command(0x60,0x20);
  }
   SerialMonitorRead();

   Serial.println("loop once");
   delay (5000);        /* Take temperature read every 1 second */

 }

}

int motion (){
 alarmValue = analogRead(alarmPin);
Serial.println (alarmValue);
 if (alarmValue < 100){
  blinky(); // blinks when the motion has been detected, just for confirmation.
  
 }
 else
 return 0;
 
 delay(500);
 

 delay (10);
 return 1;
 }

void blinky(){
 for (int  i=0 ; i<3; i ++){
   //digitalWrite(11,HIGH);
   delay(200);
   //digitalWrite(11,LOW);
   delay(200);
 }

}


/***************************************************************************

 Function Name: Cal_temp



 Purpose:

  Calculate temperature from raw data.

****************************************************************************/

void Cal_temp (int& Decimal, byte& High, byte& Low, bool& sign)

{

 if ((High&B10000000)==0x80)    /* Check for negative temperature. */

   sign = 0;

 else

   sign = 1;



 High = High & B01111111;      /* Remove sign bit */

 Low = Low & B11110000;        /* Remove last 4 bits */

 Low = Low >> 4;

 Decimal = Low;

 Decimal = Decimal * 625;      /* Each bit = 0.0625 degree C */



 if (sign == 0)                /* if temperature is negative */

 {

   High = High ^ B01111111;    /* Complement all of the bits, except the MSB */

   Decimal = Decimal ^ 0xFF;   /* Complement all of the bits */

 }

}



/***************************************************************************

 Function Name: Dis_7SEG



 Purpose:

  Display number on the 7-segment display.

****************************************************************************/

void Dis_7SEG (int Decimal, byte High, byte Low, bool sign)

{

 byte Digit = 4;                 /* Number of 7-Segment digit */

 byte Number;                    /* Temporary variable hold the number to display */



 if (sign == 0)                  /* When the temperature is negative */

 {

   Send7SEG(Digit,0x40);         /* Display "-" sign */

   Digit--;                      /* Decrement number of digit */

 }



 if (High > 99)                  /* When the temperature is three digits long */

 {

   Number = High / 100;          /* Get the hundredth digit */

   Send7SEG (Digit,NumberLookup[Number]);     /* Display on the 7-Segment */

   High = High % 100;            /* Remove the hundredth digit from the TempHi */

   Digit--;                      /* Subtract 1 digit */

 }



 if (High > 9)

 {

   Number = High / 10;           /* Get the tenth digit */

   Send7SEG (Digit,NumberLookup[Number]);     /* Display on the 7-Segment */

   High = High % 10;            /* Remove the tenth digit from the TempHi */

   Digit--;                      /* Subtract 1 digit */

 }



 Number = High;                  /* Display the last digit */

 Number = NumberLookup [Number];

 if (Digit > 1)                  /* Display "." if it is not the last digit on 7-SEG */

 {

   Number = Number | B10000000;

 }

 Send7SEG (Digit,Number);

 Digit--;                        /* Subtract 1 digit */



 if (Digit > 0)                  /* Display decimal point if there is more space on 7-SEG */

 {

   Number = Decimal / 1000;

   Send7SEG (Digit,NumberLookup[Number]);

   Digit--;

 }



 if (Digit > 0)                 /* Display "c" if there is more space on 7-SEG */

 {

   Send7SEG (Digit,0x58);

   Digit--;

 }



 if (Digit > 0)                 /* Clear the rest of the digit */

 {

   Send7SEG (Digit,0x00);

 }

}



/***************************************************************************

 Function Name: Send7SEG



 Purpose:

  Send I2C commands to drive 7-segment display.

****************************************************************************/



void Send7SEG (byte Digit, byte Number)

{

 Wire.beginTransmission(_7SEG);

 Wire.write(Digit);

 Wire.write(Number);

 Wire.endTransmission();

}









/***************************************************************************

 Function Name: SerialMonitorPrint



 Purpose:

  Print current read temperature to the serial monitor.

****************************************************************************/





void SerialMonitorRead () {
  
  
  Wire.requestFrom(THERM, 2);

       Temperature_H = Wire.read();

       Temperature_L = Wire.read();
        /* Calculate temperature */
        Cal_temp (Decimal, Temperature_H, Temperature_L, IsPositive);

         Dis_7SEG (Decimal, Temperature_H, Temperature_L, IsPositive);

  // CODE TO CHANGE LED BASED ON TEMPERATURE
  if (Temperature_H > 29) {
     digitalWrite(RED, HIGH);
     digitalWrite(GREEN,LOW);
     digitalWrite(BLUE,LOW);
   } else if (Temperature_H > 25) {
     digitalWrite(GREEN, HIGH);
     digitalWrite(BLUE, LOW);
     digitalWrite(RED, LOW);
   } else {
     digitalWrite(BLUE, HIGH);
     digitalWrite(RED, LOW);
     digitalWrite(GREEN, LOW);
   }

     serialEvent();
   
 
     if (inputString[1] == '1'){
       digitalWrite(RED, HIGH);
     }
     if (inputString[1] == '0'){
       digitalWrite(RED, LOW);
     }
     if (inputString[0] == 'Q'){
       Wire.requestFrom(THERM, 2);

       Temperature_H = Wire.read();

       Temperature_L = Wire.read();
        /* Calculate temperature */
        Cal_temp (Decimal, Temperature_H, Temperature_L, IsPositive);

         Dis_7SEG (Decimal, Temperature_H, Temperature_L, IsPositive);
        Serial.print(Temperature_H, DEC);
        Serial.print("\n");
      
     }
 
     inputString[0] = ' ';
     inputString[1] = ' ';
     inputString[2] = ' ';
     inputString[3] = '\0';

   
}



void serialEvent(){

  
    int i = 0;

   while(Serial.available()){
     char inChar = (char)Serial.read();
   
     if (inChar == '|'){
       inputString[i] = '\0';
       break;
     } else{
       inputString[i] = inChar;
     }
     i++;
   }
 }
 
 
 void X10setup(){
  pinMode(DTR, OUTPUT);
 pinMode(RTS, OUTPUT);
  Serial.begin(BAUD);
  delay(2500);
}

void sendOne()
{
  digitalWrite(DTR,LOW);
  delay(1);
  digitalWrite(DTR,HIGH);
  delay(1);
  return;
}

void sendZero()
{
    digitalWrite(RTS,LOW);
  delay(1);
  digitalWrite(RTS,HIGH);
  delay(1);
  return;
}

void sendStandby()
{
  digitalWrite(DTR,HIGH);
  digitalWrite(RTS,HIGH);
  delay(1);
  return;
}

void sendReset()
{
  digitalWrite(DTR,LOW);
  digitalWrite(RTS,LOW);
  delay(1);
  sendStandby();
  delay(35);
  return;
}

void codeMask(unsigned char code)
{
  unsigned char mask;
  for (mask = 0x80;mask>0;mask>>=1)
  {
    if(mask & code)
    sendOne();
    else
    sendZero();
  }
  return;
}


void X10_Command(unsigned char Control_Code, unsigned char On_Off)
{
  unsigned char Header1 = 0xD5;
  unsigned char Header2 = 0xAA;
  unsigned char Footer = 0xAD;
  sendReset();
  codeMask(Header1);
  codeMask(Header2);
  codeMask(Control_Code);
  codeMask(On_Off);
  codeMask(Footer);
  delay(1000);
  return;
}